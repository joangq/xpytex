{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Welcome to xpytex!\n",
    "\n",
    "This library tries to simplify Python-to-LaTeX translation. It's goal is to be flexible and extensible.\n",
    "It uses the generated Python [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) to generate string with LaTeX code. It heavily depends on the current syntax of Python, and therefore on the output generated by the `ast` module parser."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How it works\n",
    "\n",
    "The library has `handlers`, each handler converts a certain type (or portion) of the AST to LaTeX. Because the [syntax is mutually recursive](https://en.wikipedia.org/wiki/Recursive_descent_parser), the handlers also are mutually recursive.\n",
    "\n",
    "For example, `Expressions`, and more specifically `Binary Operations`.\n",
    "\n",
    "A binary operation can be defined as:\n",
    "\n",
    "```java \n",
    "<expression> ::= ...\n",
    "               | ...\n",
    "               | <binary_operation>\n",
    "\n",
    "<binary_operation> ::= <expression> <binary_operator> <expression>\n",
    "```\n",
    "\n",
    "Using [BNF](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form) metasyntax.\n",
    "\n",
    "In `xpytex`, that get's reflected by the fact that the `expressions` handler will call to the `binary_operations` handler, which will partially convert the AST into a string, but then it needs help with the other expressions.\n",
    "\n",
    "Say we have the expression `\"A+2\"`. Then, the corresponding AST should look something like:\n",
    "\n",
    "```\n",
    "expression\n",
    "└── binary_operation\n",
    "    ├── name\n",
    "    │   └── A\n",
    "    ├── binary_operator\n",
    "    │   └── Add()\n",
    "    └── constant\n",
    "        └── 2\n",
    "```\n",
    "\n",
    "Then, the `binary_operations` handler could provide a symbol for `Add()` but will need the result of `expressions.latexify` for the right `name`, and `constant` members. Then `expression` calls `name` and `constant` with the corresponding subtrees, and each can successfully return a string for their parts. Finally, all the recursion gets solved and a single string `\"A+2\"` is returned.\n",
    "\n",
    "**As mentioned early, this library _heavily_ depends on Python syntax and parser. If the syntax changes, then the handlers must be changed as well.**\n",
    "\n",
    "Nonetheless, the library as a whole tries to be as decoupled as possible, so if the same principles are followed, conversion shouldn't be that big of a deal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle a+2+2\\times{}3 \\lor{} \\text{A}.foo(x) \\land{} \\text{A}.\\text{b} \\land{} a {\\neq}_{\\text{obs}} b {=}_{\\text{obs}} c \\equiv{} d \\not\\equiv{}e+\\left\\langle{}1, 2, 3\\right\\rangle{}+\\left[\\begin{matrix}1 & 2 & 3\\\\4 & 5 & 6\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xpytex import latexify\n",
    "from xpytex.utils import displaymath\n",
    "\n",
    "displaymath( latexify('a+2+2*3 or A.foo(x) and A.b and a != b == c is d is not e + Secuencia.de(1,2,3) + np.array([[1,2,3], [4,5,6]])') )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
